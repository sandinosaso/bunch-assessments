// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Question /> Renders Question content when passing all props 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <Field
    component={[Function]}
    heading="Question Label"
    name="Question Name"
    options={
        Array [
            Object {
              "label": "Option 1",
              "value": 1,
            },
            Object {
              "label": "Option 2",
              "value": 2,
            },
          ]
    }
    style={undefined}
    validate={
        Array [
            [Function],
          ]
    }
/>,
  "nodes": Array [
    <Field
      component={[Function]}
      heading="Question Label"
      name="Question Name"
      options={
            Array [
                  Object {
                    "label": "Option 1",
                    "value": 1,
                  },
                  Object {
                    "label": "Option 2",
                    "value": 2,
                  },
                ]
      }
      style={undefined}
      validate={
            Array [
                  [Function],
                ]
      }
/>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <Question
        data={
                Object {
                        "input": Object {},
                        "label": "Question Label",
                        "name": "Question Name",
                        "options": Array [
                          Object {
                            "label": "Option 1",
                            "value": 1,
                          },
                          Object {
                            "label": "Option 2",
                            "value": 2,
                          },
                        ],
                        "type": "radio",
                      }
        }
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "data": Object {
            "input": Object {},
            "label": "Question Label",
            "name": "Question Name",
            "options": Array [
              Object {
                "label": "Option 1",
                "value": 1,
              },
              Object {
                "label": "Option 2",
                "value": 2,
              },
            ],
            "type": "radio",
          },
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <Field
          component={[Function]}
          heading="Question Label"
          name="Question Name"
          options={
                    Array [
                              Object {
                                "label": "Option 1",
                                "value": 1,
                              },
                              Object {
                                "label": "Option 2",
                                "value": 2,
                              },
                            ]
          }
          style={undefined}
          validate={
                    Array [
                              [Function],
                            ]
          }
/>,
        "_debugID": 2,
        "_renderedOutput": <Field
          component={[Function]}
          heading="Question Label"
          name="Question Name"
          options={
                    Array [
                              Object {
                                "label": "Option 1",
                                "value": 1,
                              },
                              Object {
                                "label": "Option 2",
                                "value": 2,
                              },
                            ]
          }
          style={undefined}
          validate={
                    Array [
                              [Function],
                            ]
          }
/>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Question
    data={
        Object {
            "input": Object {},
            "label": "Question Label",
            "name": "Question Name",
            "options": Array [
              Object {
                "label": "Option 1",
                "value": 1,
              },
              Object {
                "label": "Option 2",
                "value": 2,
              },
            ],
            "type": "radio",
          }
    }
/>,
}
`;
